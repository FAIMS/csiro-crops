<?xml version="1.0" ?>
<!--@POSTPROC: ./postproc.sh-->
<module>

<Login f="nodata">
  <Login>
    <User_ID t="dropdown" f="user">
      <!--TODO: Must be remembered and login tabgroup skipped on subsequent
           logins-->
    </User_ID>
    <Login t="button" l="Main"/>
  </Login>
</Login>

<Main f="nodata">
  <Main>
    <Record_Field t="button" l="Field"/>
    <Logout t="button" l="Login"/>
  </Main>
  <search>
    <!--TODO: List of recorded archents stored in localsettings. (we'll need to
         figure out how to do it)-->
  </search>
</Main>

<Field>
  <Field>
    <!--TODO: (no certainty on anything)-->
    <Crop_Type f="id">
      <str>
        <!--TODO:-->
        <!--  BRIAN:-->
        <!--    Crop, show annotation if not null, year-->
        <!--    So we can do Wheat 2016-->
        <!--    so if annotation, show it with ": annotation"-->
        <!--    {{if and($1, not($3)) then "$1 "}}{{if and($1, $3) then "$3 "}} let's see what that does-->
        <!--    basically, if there's no freetext, write vocab-->
        <!--    if there's freetext, write freetext-->
        <fmt>{{if and($1, not($3)) then "$1 "}}{{if and($1, $3) then "$3 "}}</fmt>
      </str>
      <opts>
        <opt>Wheat</opt>
        <opt>Barley</opt>
        <opt>Oats</opt>
        <opt>Tricicale</opt>
        <opt>Rye</opt>
        <opt>Canola</opt>
        <opt>Lupins</opt>
        <opt>Field Peas</opt>
        <opt>Chickpeas</opt>
        <opt>Fababeans</opt>
        <opt>Lentils</opt>
        <opt>Vetch</opt>
        <opt>Sunflower</opt>
        <opt>Sorghum</opt>
        <opt>Cotton</opt>
        <opt>Rice</opt>
        <opt>Sown legume pasture</opt>
        <opt>Volunteer pasture</opt>
        <opt>Other</opt>
      </opts>
    </Crop_Type>
    <Year b="decimal" f="id"/>
    <Month_of_Sowing b="date"/>
    <Month_of_Harvest t="radio">
      <opts>
        <opt>March</opt>
        <opt>April</opt>
        <opt>May</opt>
      </opts>
    </Month_of_Harvest>
    <Enterprise t="radio">
      <opts>
        <opt>Yes</opt>
        <opt>No</opt>
      </opts>
    </Enterprise>
    <Photo t="camera"/>
    <Notes/>
  </Field>
  <Location>
    <Record_Centre_of_Paddock t="button">
      <!--TODO: (Writes point to archent)-->
    </Record_Centre_of_Paddock>
    <Centre_of_Paddock t="input" f="readonly"/>
    <Hr_Tag t="webview"/>
    <cols>
      <col>
        <Record_NW_Corner_of_Paddock t="button"/>
        <Record_NE_Corner_of_Paddock t="button"/>
      </col>
      <col>
        <Record_SW_Corner_of_Paddock t="button"/>
        <Record_SE_Corner_of_Paddock t="button"/>
      </col>
    </cols>
    <Corners_of_Paddock t="input" f="readonly">
      <!--TODO: Write AsText Archent polygon to here-->
    </Corners_of_Paddock>
  </Location>
</Field>

<logic><![CDATA[
/******************************* LOCAL RECORDS ********************************/
/* Keeps the list of records user-specific and improves performance.          */
/******************************************************************************/
  q  = "CREATE TABLE IF NOT EXISTS localRecords ";
  q += "(uuid text primary key, value text);"
  fetchOne(q);

  // This function is set as a callback to saveTabGroup("Field") via the
  // @POSTPROC script.
  saveFieldCallback() {
    String val = uuid;

    g  = "REPLACE INTO localSettings(uuid, value) ";
    g += "VALUES('" + uuid + "', '" + val + "');";
    fetchOne(q);
  }

/**************************** USERNAME PERSISTENCE ****************************/
/* Remembers username selected from previous session and automatically logs   */
/* the user in with it subsequent sessions.                                   */
/*                                                                            */
/* Requirement source: Email, "Fwd: my contact details"                       */
/******************************************************************************/
  addOnEvent("Login/Login/User_ID", "load",  "tryLoadingPreviousUser()");
  addOnEvent("Login/Login/Login",   "click", "savePreviousUser()");

  tryLoadingPreviousUser() {
    String gotoTabGroup = "Main";
    String key = "Login/Login/User_ID";
    String q = "SELECT value FROM localSettings WHERE key = '" + key + "';";

    fetchOne(q, new FetchCallback() {
      onFetch(result) {
        if (!isNull(result)) {
          String userVocabId = result.get(0);
          selectUser(userVocabId);
          showTabGroup(gotoTabGroup);
        }
      }
    });
  }

  savePreviousUser() {
    String key = "Login/Login/User_ID";
    String val = getFieldValue(key);
    insertIntoLocalSettings(key, val);
  }

  selectUser (String userVocabId) {
    String userQ = "SELECT userid,fname,lname,email FROM user " +
                   "WHERE  userid='" + userVocabId + "';";
    FetchCallback callback = new FetchCallback() {
      onFetch(result) {
        user = new User(
              result.get(0),
              result.get(1),
              result.get(2),
              result.get(3)
        );
        setUser(user);
        username = result.get(1) + " " + result.get(2);
      }
    };

    fetchOne(userQ, callback);
  }

/************************ SAVING POSITIONS TO ARCHENT *************************/
/* Requirement source: Email, "Fwd: my contact details"                       */
/******************************************************************************/
  String c = "click"; // I'm obsessive about an 80-character limit on line width
  addOnEvent("Field/Location/Record_Centre_of_Paddock",    c, "saveCentre()");
  addOnEvent("Field/Location/Record_NW_Corner_of_Paddock", c, "saveNwCorner()");
  addOnEvent("Field/Location/Record_NE_Corner_of_Paddock", c, "saveNeCorner()");
  addOnEvent("Field/Location/Record_SW_Corner_of_Paddock", c, "saveSwCorner()");
  addOnEvent("Field/Location/Record_SE_Corner_of_Paddock", c, "saveSeCorner()");

  MapPos centre   = null;
  MapPos nwCorner = null;
  MapPos neCorner = null;
  MapPos swCorner = null;
  MapPos seCorner = null;

  makeMapPos() {
    Object pos  = getGPSPosition();
    Double lat  = position.getLatitude();
    Double long = position.getLongitude();
    MapPos pos  = new MapPos(long, lat);

    return pos;
  }

  saveCentre()   { centre   = makeMapPos(); saveGeometry(); }
  saveNwCorner() { nwCorner = makeMapPos(); saveGeometry(); }
  saveNeCorner() { neCorner = makeMapPos(); saveGeometry(); }
  saveSwCorner() { swCorner = makeMapPos(); saveGeometry(); }
  saveSeCorner() { seCorner = makeMapPos(); saveGeometry(); }

  saveGeometry() {
    String refCentre  = "Field/Location/Record_Centre_of_Paddock";
    String refCorners = "Field/Location/Corners_of_Paddock";

    // Determine/set currentUuid and archEntType
    String tabgroup    = "Field"
    String archEntType = tabgroup.replaceAll("_", " ");
    String currentUuid = getUuid(tabgroup);

    // Make geometry---a point (centre) and a polygon (corners)
    List mapPoses = new ArrayList();
    mapPoses.add(nwCorner);
    mapPoses.add(neCorner);
    mapPoses.add(swCorner);
    mapPoses.add(seCorner);

    Point   pt   = new Point  (centre,   null, (PointStyle)   null, null);
    Polygon pgon = New Polygon(mapPoses, null, (PolygonStyle) null, null);

    // Put geometry in a list
    ArrayList geoList = new ArrayList();
    geoList.add(pt);
    geoList.add(pgon);

    // Prepare to save point to archEnt, then attempt to save archEnt. Upon a
    // successful save, update the fields displayed to the user.
    SaveCallback callback = new SaveCallback() {
        onSave(uuid, newRecord) {
          String msg = "[saveGeometry()] Added geometry: " + geolist;
          print(msg);

          setFieldValue(refCentre,  pt.  toString());
          setFieldValue(refCorners, pgon.toString());
        }
    };
    saveArchEnt(currentUuid, archEntType, geoList, attributes, callback);
  }

/************************ DRAW A PRETTY HR TAG IN HTML ************************/
  String ref  = "Field/Location/Hr_Tag"
  String html = "<hr/>"
  populateWebViewHtml(ref, html);
]]></logic>

</module>
