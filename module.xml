<?xml version="1.0" ?>
<!--@POSTPROC: ./postproc.sh-->
<module>

<Main f="nodata">
  <Main>
    <Record_Field t="button" l="Field"/>
    <Logout t="button" l="Login"/>
  </Main>
  <search>
    <!--Searching has been modified to include only local records using a-->
    <!--combination of code in this file (ctrl+f: "LOCAL RECORDS") and-->
    <!--@POSTPROC.-->
  </search>
</Main>

<Login f="nodata">
  <Login>
    <User_ID b="decimal" t="input"/>
    <Login t="button"/>
  </Login>
</Login>

<Field>
  <Field>
    <Crop_Type f="id nocertainty">
      <str>
        <fmt>{{if $1 then "$1 "}}{{if $2 then "($2) "}}{{if $3 then "$3"}}</fmt>
      </str>
      <opts>
        <opt>Wheat</opt>
        <opt>Barley</opt>
        <opt>Oats</opt>
        <opt>Tricicale</opt>
        <opt>Rye</opt>
        <opt>Canola</opt>
        <opt>Lupins</opt>
        <opt>Field Peas</opt>
        <opt>Chickpeas</opt>
        <opt>Fababeans</opt>
        <opt>Lentils</opt>
        <opt>Vetch</opt>
        <opt>Sunflower</opt>
        <opt>Sorghum</opt>
        <opt>Cotton</opt>
        <opt>Rice</opt>
        <opt>Sown legume pasture</opt>
        <opt>Volunteer pasture</opt>
        <opt>Other</opt>
      </opts>
    </Crop_Type>
    <Year b="decimal" f="id nocertainty"/>
    <Month_of_Sowing b="date" f="nocertainty"/>
    <Month_of_Harvest t="radio" f="nocertainty">
      <opts>
        <opt>March</opt>
        <opt>April</opt>
        <opt>May</opt>
      </opts>
    </Month_of_Harvest>
    <Enterprise t="radio" f="nocertainty">
      <opts>
        <opt>Yes</opt>
        <opt>No</opt>
      </opts>
    </Enterprise>
    <Photo t="camera" f="nocertainty"/>
    <Notes f="nocertainty"/>
  </Field>
  <Location>
    <Centre_of_Paddock t="input" f="readonly nocertainty"/>
    <Record_Centre_of_Paddock t="button"/>
    <Hr_Tag t="webview" f="nolabel"/>
    <cols>
      <Corner_1 t="input" f="readonly nocertainty"/>
      <Corner_2 t="input" f="readonly nocertainty"/>
    </cols>
    <cols>
      <Corner_3 t="input" f="readonly nocertainty"/>
      <Corner_4 t="input" f="readonly nocertainty"/>
    </cols>
    <cols>
      <Record_Corner_1 t="button"/>
      <Record_Corner_2 t="button"/>
    </cols>
    <cols>
      <Record_Corner_3 t="button"/>
      <Record_Corner_4 t="button"/>
    </cols>
  </Location>
</Field>

<logic><![CDATA[
/******************************* LOCAL RECORDS ********************************/
/* Keeps the list of records user-specific and improves performance.          */
/******************************************************************************/
  // Create a table in the database for the user-specific records if one doesn't
  // exist yet.
  String q = "";
  q += "CREATE TABLE IF NOT EXISTS localRecord ";
  q += "(uuid text primary key, response text);";
  fetchOne(q);

  // The saveFieldCallback and deleteFieldCallback functions are set as a
  // callback to saveTabGroup("Field") and duplicateField() via the @POSTPROC
  // script.
  saveFieldCallback() {
    // Determine/set currentUuid and archEntType
    String tabgroup    = "Field";
    String archEntType = tabgroup.replaceAll("_", " ");
    String currentUuid = getUuid(tabgroup);

    // Make and execute query to update/insert local record data
    String q = "";
    q += "REPLACE INTO localRecord(uuid, response) ";
    q += "  SELECT uuid, response ";
    q += "  FROM latestNonDeletedArchEntFormattedIdentifiers ";
    q += "  WHERE uuid = '%s'; ";
    q  = q.replaceFirst("%s", currentUuid);
    fetchOne(q);
  }

  deleteFieldCallback() {
    // Determine/set currentUuid and archEntType
    String tabgroup    = "Field";
    String archEntType = tabgroup.replaceAll("_", " ");
    String currentUuid = getUuid(tabgroup);

    // Make and execute deletion query
    String q = "";
    q += "DELETE FROM localRecord ";
    q += "WHERE uuid='%s';";
    q  = q.replaceFirst("%s", currentUuid);
    fetchOne(q);
  }

/**************************** USERNAME PERSISTENCE ****************************/
/* Remembers username selected from previous session and automatically logs   */
/* the user in with it subsequent sessions.                                   */
/*                                                                            */
/* Requirement source: Email, "Fwd: my contact details"                       */
/******************************************************************************/
  addOnEvent("Main",              "show",  "acquireUser()");
  addOnEvent("Main/Main/Logout",  "click", "logOut()");
  addOnEvent("Login/Login/Login", "click", "tryLoggingIn()");

  // Load the last user from localSettings if it exists. Otherwise, redirect the
  // user to the Login tab group.
  acquireUser() {
    String gotoTabGroup = "Login";
    String key = "Login/Login/User_ID";
    String q = "SELECT value FROM localSettings WHERE key = '" + key + "';";

    // `dialog` is a global defined by the autogenerator
    dialog = showBusy("Ensuring you are logged in", "please wait...");
    fetchOne(q, new FetchCallback() {
      onFetch(result) {
        if (isNull(result)) {
          showTabGroup(gotoTabGroup);
        } else {
          String userVocabId = result.get(0);
          setFieldValue(key, userVocabId);
          tryLoggingIn();
        }

        dialog.dismiss();
      }
    });
  }

  // Try loging in using the User_ID entered by the user. If that fails, display
  // a warning to the user.
  tryLoggingIn() {
    String refUserId = "Login/Login/User_ID";
    String userVocabId = getFieldValue(refUserId);

    String userQ = "SELECT userid,fname,lname,email FROM user " +
                   "WHERE  userid='" + userVocabId + "';";
    FetchCallback callback = new FetchCallback() {
      onFetch(result) {
        if (isNull(result)) loginFailure();
        else                loginSuccess(result);
      }
    };
    fetchOne(userQ, callback);
  }

  loginFailure() {
    String msgTitle = "Cannot log in";
    String msgBody  = "User ID not valid";
    showWarning(msgTitle, msgBody);
  }

  // 1) Set the user with `setUser()`.
  // 2) Remember the user so that they can be logged in automatically next time.
  // 3) Show the Main tab group.
  loginSuccess(result) {
    user = new User(
          result.get(0),
          result.get(1),
          result.get(2),
          result.get(3)
    );
    setUser(user);

    String refMain = "Main";
    String key = "Login/Login/User_ID";
    String val = user.getUserId();
    insertIntoLocalSettings(key, val);
    newTab(refMain, true);
  }

  logOut() {
    String key = "Login/Login/User_ID";

    String q = "";
    q += "DELETE FROM localSettings ";
    q += "WHERE key = '%s'";
    q  = q.replaceFirst("%s", key);

    fetchOne(q);
  }

/************************ SAVING POSITIONS TO ARCHENT *************************/
/* Requirement source: Email, "Fwd: my contact details"                       */
/******************************************************************************/
  String c = "click"; // I'm obsessive about an 80-character limit on line width
  addOnEvent("Field/Location/Record_Centre_of_Paddock", c, "saveCentre()");
  addOnEvent("Field/Location/Record_Corner_1",          c, "savecorner1()");
  addOnEvent("Field/Location/Record_Corner_2",          c, "savecorner2()");
  addOnEvent("Field/Location/Record_Corner_3",          c, "savecorner3()");
  addOnEvent("Field/Location/Record_Corner_4",          c, "savecorner4()");

  addOnEvent("Main", "show", "initialiseGeometry()");

  initialiseGeometry() {
    global.centre  = null;
    global.corner1 = null;
    global.corner2 = null;
    global.corner3 = null;
    global.corner4 = null;
  }

  makePoint() {
    String msgSuccess = "Point taken";
    String msgFail    = "No GPS signal is present";

    Object pos = getGPSPosition();
    if (pos == null) {
      showToast(msgFail);
      return null;
    }

    Double lat = pos.getLatitude();
    Double lon = pos.getLongitude();
    MapPos mapPos = new MapPos(lon, lat);
    Point  pt     = new Point(mapPos, null, (PointStyle) null, null);

    showToast(msgSuccess);
    return pt;
  }

  saveCentre()  { centre  = makePoint(); displayGeometry(); saveGeometry(); }
  savecorner1() { corner1 = makePoint(); displayGeometry(); saveGeometry(); }
  savecorner2() { corner2 = makePoint(); displayGeometry(); saveGeometry(); }
  savecorner3() { corner3 = makePoint(); displayGeometry(); saveGeometry(); }
  savecorner4() { corner4 = makePoint(); displayGeometry(); saveGeometry(); }

  displayGeometry() {
    // Inputs to update
    refCentre  = "Field/Location/Centre_of_Paddock";
    refCorner1 = "Field/Location/Corner_1";
    refCorner2 = "Field/Location/Corner_2";
    refCorner3 = "Field/Location/Corner_3";
    refCorner4 = "Field/Location/Corner_4";

    // Output geometry to inputs
    setFieldValue(refCentre,  toString(centre ));
    setFieldValue(refCorner1, toString(corner1));
    setFieldValue(refCorner2, toString(corner2));
    setFieldValue(refCorner3, toString(corner3));
    setFieldValue(refCorner4, toString(corner4));
  }

  String toString(MapPos mp) {
    if (mp == null) return "";

    double[] coords = mp.toArray();
    String x = String.valueOf(coords[0]);
    String y = String.valueOf(coords[1]);
    String s = "Collected (%s, %s)";
    s = s.replaceFirst("%s", x);
    s = s.replaceFirst("%s", y);
    return s;
  }

  String toString(Point pt) {
    if (pt == null) return "";

    return toString(pt.getMapPos());
  }

  // Puts the geometry into a list, ready for saving to an archent
  packFieldGeometry() {
    // Put geometry in a list
    ArrayList geoList = new ArrayList();
    geoList.add(centre );
    geoList.add(corner1);
    geoList.add(corner2);
    geoList.add(corner3);
    geoList.add(corner4);

    return geoList;
  }

  // Unpacks geometry of a Field archent to globals. This is set as the callback
  // to `loadFieldFrom(String uuid)` via @POSTPROC.
  unpackFieldGeometry(geoList) {
    valCentre  = getFieldValue("Field/Location/Centre_of_Paddock");
    valCorner1 = getFieldValue("Field/Location/Corner_1");
    valCorner2 = getFieldValue("Field/Location/Corner_2");
    valCorner3 = getFieldValue("Field/Location/Corner_3");
    valCorner4 = getFieldValue("Field/Location/Corner_4");

    // Load the list of points from `geoList` into the correct globals
    Integer i = 0;
    if (isNull(valCentre )) global.centre  = null;
    else                    global.centre  = geoList.get(i++);
    if (isNull(valCorner1)) global.corner1 = null;
    else                    global.corner1 = geoList.get(i++);
    if (isNull(valCorner2)) global.corner2 = null;
    else                    global.corner2 = geoList.get(i++);
    if (isNull(valCorner3)) global.corner3 = null;
    else                    global.corner3 = geoList.get(i++);
    if (isNull(valCorner4)) global.corner4 = null;
    else                    global.corner4 = geoList.get(i++);
  }

  saveGeometry() {
    // It's probably a good idea to ensure that this is effectively the same as
    // the function `onShowField()` which is generated by the autogen.
    String tabgroup = "Field";
    String callback = "saveFieldCallback();";
    saveTabGroup(tabgroup, callback);
  }

/************************ DRAW A PRETTY HR TAG IN HTML ************************/
  String ref  = "Field/Location/Hr_Tag";
  String html = "<hr/>";
  populateWebViewHtml(ref, html);
]]></logic>

</module>
